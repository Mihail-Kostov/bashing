#!/bin/bash

#!require io

# Code Generation/File Concatenation for Bashing

# ------------------------------------------------------------
# Header
function generateHeader() {
    print_out "#!/bin/bash"
    sep
    comment " Artifact:     $GROUP_ID/$ARTIFACT_ID"
    comment " Version:      $ARTIFACT_VERSION"
    comment " Date (UTC):   $(date -u)"
    comment " Generated by: bashing $BASHING_VERSION"
    sep
}

# ------------------------------------------------------------
# Metadata
function generateMetadata() {
    print_out "export __BASHING_VERSION='$BASHING_VERSION'"
    print_out "export __VERSION='$ARTIFACT_VERSION'"
    print_out "export __ARTIFACT_ID='$ARTIFACT_ID'"
    print_out "export __GROUP_ID='$GROUP_ID'"
    sep
}

# ------------------------------------------------------------
# Includes
function genInclude() {
    if [ -s "$SRC_PATH/$1" ]; then
        cd "$SRC_PATH"
        debug "Including File    ./$1 ..."
        includeBashFile "./$1" | redirect_out
        sep
        cd "$CWD"
    fi
}

# ------------------------------------------------------------
# Library
function includeLibFile() {
    local path=""
    while read -r path; do
        local fullPath=$(cd "$SRC_PATH/$(dirname "$path")" && pwd)/$(basename "$path");
        if bash -n "$fullPath" 1> /dev/null; then
            debug "Including Library $path ..."
            includeBashFile "$path" | redirect_out
            nl
        else
            return 1;
        fi
    done
    return 0
}

function generateLibrary() {
    comment "Library"
    nl
    cd "$SRC_PATH";
    find "./lib" -type f -name "*.sh" | includeLibFile
    if [[ "$?" != "0" ]]; then exit 1; fi
    sep
    cd "$CWD";
}

# ------------------------------------------------------------
# CLI
function collectCliScripts() {
    if [ -d "$CLI_PATH" ]; then
        cd "$CLI_PATH"
        find "." -type f -name "*.sh"
        cd "$CWD"
    fi
}

function toFn() {
    local n="$1"
    echo "cli_${n:2:-3}" | tr '/' '_' | sed 's/_+/_/g'
}

function toCliArg() {
    local n="$1"
    echo "${n:2:-3}" | tr '/' '.'
}

function includeCliFn() {
    local path="$1"
    local fnName=$(toFn "$path");
    local fullPath="$CLI_PATH/$path"

    # Checks
    if [[ "$fnName" == "cli_help" ]] && [[ "$BUILD_HELP" == "yes" ]]; then
        echo "WARN: CLI Function 'help' ($fullPath) overwrite built-in help." 1>&2;
        echo "WARN: Supply '--no-help' if you want to create your own help function." 1>&2;
    fi

    # Create
    if bash -n "$fullPath" 1> /dev/null; then
        debug "Including Task    $path -> $fnName ..."
        comment "./cli/${path:2}"
        print_out "function ${fnName}() {"
        includeBashFile "$fullPath" | sed 's/^/  /g' | redirect_out
        print_out "}"
        return 0;
    fi
    return 1;
}

function buildCliHandler() {
    local path="$1"
    local fnName=$(toFn "$path")
    local argName=$(toCliArg "$path")

    print_out "    \"$argName\")"
    print_out "      $fnName \"\$@\" &"
    print_out '      local pid="$!"'
    print_out '      ;;'
}

function buildCliHeader() {
    print_out "function __run() {"
    print_out '  local pid=""'
    print_out '  local status=255'
    print_out '  local cmd="$1"'
    print_out '  shift'
    print_out '  case "$cmd" in'
    print_out '    "")'
    print_out '      __run "help";'
    print_out '      return $?'
    print_out '      ;;'
}

function buildCliFooter() {
    print_out '    *)'
    print_out '      echo "Unknown Command: $cmd" 1>&2;'
    print_out '      ;;'
    print_out '  esac'
    print_out '  if [ ! -z "$pid" ]; then'
    print_out '      wait "$pid"'
    print_out '      local status=$?'
    print_out '  fi'
    print_out '  return $status'
    print_out "}"
}

function buildHelpTable() {
    for path in $@; do
        local argName=$(toCliArg "$path");
        echo "$argName|:|(no help available)"
    done
}

function buildHelpFunction() {
    print_out '    "help")'
    print_out '      echo "Usage: $0 <command> [<parameters> ...]" 1>&2'
    if [ ! -z "$@" ]; then
        print_out '      cat 1>&2 <<HELP'
        print_out ''
        buildHelpTable "$@" | column -s "|" -t\
            | sed 's/^/    /'\
            | redirect_out
        print_out ''
        print_out 'HELP'
    fi
    print_out '      status=0'
    print_out '      ;;'
}

function buildVersionFunction() {
    print_out '    "version")'
    print_out "      echo \"$ARTIFACT_ID $ARTIFACT_VERSION (bash \$BASH_VERSION)\""
    print_out '      status=0'
    print_out '      ;;'
}

function generateCli() {
    cliScripts=$(collectCliScripts);

    set -e
    comment "CLI Functions"
    nl
    for path in $cliScripts; do includeCliFn "$path"; done
    sep
    comment "Main Function"
    nl
    buildCliHeader
    for path in $cliScripts; do buildCliHandler "$path"; done
    if [[ "$BUILD_HELP" == "yes" ]]; then buildHelpFunction "$cliScripts"; fi
    buildVersionFunction
    buildCliFooter
    print_out "__run \"\$@\""
    print_out 'export __STATUS="$?"'
    sep
    cd "$CWD";
}

function generateCliExit() {
    print_out 'exit $__STATUS'
}

# ------------------------------------------------------------
# Standalone Task Generation

function generateStandaloneTask() {
    local task="$1"
    COMPACT="yes"
    OUT=""
    DEBUG="no"
    VERBOSE="no"
    generateHeader
    generateMetadata
    genInclude "init.sh"
    generateLibrary
    genInclude "before-task.sh"
    print_out 'shift'
    print_out 'function __run() { echo "__run not available when running CLI task directly!" 1>&2; exit 1; }'
    genInclude "cli/$task"
    genInclude "after-task.sh"
    genInclude "cleanup.sh"
}
